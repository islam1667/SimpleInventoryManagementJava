package com.company.swingUI.JPanels;

import com.company.bean.Product;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import de.siegmar.fastcsv.reader.CsvReader;
import de.siegmar.fastcsv.writer.CsvWriter;
import java.io.Writer;

/**
 *
 * @author islam
 */
public class JPanelImport extends javax.swing.JPanel {

    /**
     * Creates new form JPanelSell
     */
    public JPanelImport() {
        initComponents();
        testData();
        configureTable();
    }

    private void configureTable() {
        jTableImport.setRowHeight(25);
        jTableImport.getColumnModel().getColumn(1).setCellEditor(new ProductCellEditor(new EventCellInputChange() {
            @Override
            public void inputChanged() {
                DefaultTableModel model = (DefaultTableModel) jTableImport.getModel();
                if (model.getValueAt(model.getRowCount() - 1, 0) != null) {
                    model.addRow(new Object[model.getColumnCount()]);
                }
                sumAndShow();
                System.out.println("Input Change Fired");
            }
        }));
    }

    private void testData() {
        jTableImport.getColumnModel().getColumn(4).setCellEditor(new QtyCellEditor(new EventCellInputChange() {
            @Override
            public void inputChanged() {
//                sumAndShow();
            }
        }));

        
        
        
//        DefaultTableModel model = (DefaultTableModel) jTableSell.getModel();
//        model.addRow(new Product("Coca", "cda", 2.0, -1, "A1", 2).toTableRow(jTableSell.getRowCount() + 1));
//        model.addRow(new Product("Cofasca", "csa", 3.0, -1, "A2", 2).toTableRow(jTableSell.getRowCount() + 1));
//        model.addRow(new Product("Cocfaa", "cvf", 4.0, -1, "A3", 2).toTableRow(jTableSell.getRowCount() + 1));
//        model.addRow(new Product("Cofaca", "ccd", 5.0, -1, "A4", 2).toTableRow(jTableSell.getRowCount() + 1));
//        model.addRow(new Product("Cocfasa", "cas", 6.0, -1, "A5", 2).toTableRow(jTableSell.getRowCount() + 1));
    }

    public double sumAndShow() {
        double sum = 0;
        for (int row = 0; row < jTableImport.getRowCount()-1; row++) {
            sum += (double) jTableImport.getValueAt(row, 6);
        }
        totalJLabel.setText("Total: "+ String.format("%.2f", sum));
        return sum;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableImport = new javax.swing.JTable();
        totalJLabel = new javax.swing.JLabel();

        jButton1.setText("Process import");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTableImport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Data", "Part_Name", "Part_Number", "Part_Description", "Part_Quantity_Import", "Part_Price", "Total_Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableImport.setToolTipText("");
        jTableImport.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTableImport);
        if (jTableImport.getColumnModel().getColumnCount() > 0) {
            jTableImport.getColumnModel().getColumn(0).setResizable(false);
            jTableImport.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTableImport.getColumnModel().getColumn(1).setPreferredWidth(160);
            jTableImport.getColumnModel().getColumn(3).setPreferredWidth(0);
            jTableImport.getColumnModel().getColumn(5).setResizable(false);
            jTableImport.getColumnModel().getColumn(5).setPreferredWidth(0);
            jTableImport.getColumnModel().getColumn(6).setResizable(false);
            jTableImport.getColumnModel().getColumn(6).setPreferredWidth(0);
        }

        totalJLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        totalJLabel.setText("Import page");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(totalJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTableImport.clearSelection();
        DefaultTableModel model = (DefaultTableModel) jTableImport.getModel();
        
        List<Product> products = new ArrayList<>();
//        System.out.println(evt.getWhen());
        for (int row = 0; row < model.getRowCount()-1; row++) {
            products.add((Product)model.getValueAt(row, 0));
            System.out.println(model.getDataVector().get(row));
            if(((int)model.getValueAt(row, 4))==0){
                JOptionPane.showMessageDialog(this, "Quantity cant be 0.");
                System.out.println("There is 0");
            }
        }
        
//        for(Product p : products){
//            System.out.println(p.toString());
//        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableImport;
    private javax.swing.JLabel totalJLabel;
    // End of variables declaration//GEN-END:variables
}
